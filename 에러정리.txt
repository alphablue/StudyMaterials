// 문제1. 초기화 에러가 발생함
참고 : https://stackoverflow.com/questions/60608101/how-request-permissions-with-jetpack-compose

val launcher = rememberLauncherForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) {
        permission ->
        when {
            permission.getOrDefault(Manifest.permission.CAMERA, false)
            -> {
            }

            permission.getOrDefault(Manifest.permission.ACCESS_FINE_LOCATION, false)
            -> {
                val settingIntent = Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS)
                startActivity(context, settingIntent, null)
            }
            else -> {
            }
        }
    }

-> 해결방법
참고 1 : https://ichi.pro/ko/jetpack-composelo-won-taeb-jeonhwa-beonho-logeu-in-181688839103070

side effect 부분에 잘 설명이 되어 있다. 이 부분은 상황에 따라서 조사후 사용하면 좋을 뜻 하다.
내가 적용한 것은 LaunchedEffect 를 활용 하는 것이다.

// 문제2. startActivity가 실행되지 않음
fine location 의 설정창에는 잘 가지는데 카메라 권한을 위한 곳은 가지지 않는 문제가 있음
Intent(Settings.ACTION_APPLICATION_DETAIL)을 실행하기 위한 조건이 있는듯

-> 해결
https://stackoverflow.com/questions/32822101/how-can-i-programmatically-open-the-permission-screen-for-a-specific-app-on-andr

val settingIntent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)
                val uri = Uri.fromParts("package", context.packageName, null)
                settingIntent.data = uri
                startActivity(context, settingIntent, null)

디테일한 설정창으로 가기위해서는 실행중인 앱의 패키지를 알아야 그 앱에 맞는 설정창을 열 수 있다. 따라서 그것을 설정 해줄
추가적인 정보를 기제할 필요가 있음


// 문제3. 세팅창에서 이동했을 때 권한을 변경 했는지 이벤트를 잡고 싶은데 compose에서는 힘듬
참고 1. https://stackoverflow.com/questions/66546962/jetpack-compose-how-do-i-refresh-a-screen-when-app-returns-to-foreground

내가 보기에는 수명주기를 activity에 넣어주고 그 액티비가 실행되는 시점에 맞춰서 퍼미션을 체크 하도록 해줘야 할 것 같음 클릭 이벤트나
엑티비티의 이동이나 작동은 컴포즈들을 타고 넘어가는 방법으로 분리 해야 할 것 같다.

 세부 문제 1.) 컴포즈에서 콜백으로 데이터를 받아서 rememberLauncherForActivityResult를 실행하려 했지만 수명주기를 찾아서 맞춰서 실행해주기에 어려운 문제가 있었음
 그에 따라 엑티비티에서 실행하도록 하려 했지만 세팅창으로 이동 시키는데 
 outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag
 에러가 뜨면서 세팅창으로 넘어가지 못하는 현상이 발생

 세부 분제 1. 해결 -> 
 fun goDetailApplicationSetting(context: Context) {
    val settingIntent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)
    val uri = Uri.fromParts("package", context.packageName, null)
    settingIntent.data = uri

    /** 이 부분을 추가 해 줌으로 새로운 작업으로 실행 하도록 했음 **/
    settingIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
    context.startActivity(settingIntent)
}

 세부 분제 2.) 하지만 엑티비티 종속적이기 때문에 콤포즈로 구분해서 사용하기 어려움, 나중에는 촬영 하려면 촬영을 위한 버튼이 있고
 그 버튼을 클릭했을 때 권한을 체크하도록 분리해서 상황별 권한을 확인 하도록 하는 것이 더 의미가 있을 것으로 생각됨

 권한을 거부 했을 시에는 앱 사용을 못하도록 하는 것이 편리할 뜻


// 문제 4. compose의 텍스트 요소를 중앙 정렬 하고 싶을때 방법을 모름
해결 -> modifier.wrapContentHeight() 를 주면 중앙 정렬됨

// 문제 5. textButton에 height를 주고 내부 텍스트의 버튼 클릭의 영역을 맞출려고 하니 내부 텍스트가 보이는 영역에서만 클릭을 할 수 있는 문제가 있음
해결 ->
TextButton(
        modifier = modifier
            .height(240.dp)
            .padding(6.dp)
            .border(1.dp, color = borderColor),
        onClick = onClick,
    ) {
        Text(text = title,
            textAlign = TextAlign.Center,
            fontSize = 32.sp,
            modifier= Modifier.fillMaxSize(1f).wrapContentHeight(),
            color= Color.LightGray)
    }

위의 코드에서 보듯이 내부 text의 높이와 내부 텍스트를 중아으로 정렬하니 모든 영역에서 클릭을 할 수 있음

문제 6. 파일의 정보를 받아왔는데 이걸 coil을 이용해서 로드 하는 방법을 모르겠음
해결 -> https://coil-kt.github.io/coil/getting_started/
 공식 사이트에서 지원하는 데이터의 양식을 표로 정리 해 놨음 그걸 보고 필요에 맞춰서 사용하면 될뜻 일단 내가 한 코드는 아래와 같음

 val imageResource = remember { mutableStateOf<Uri?>(null)}
            val painter = rememberAsyncImagePainter(
                model = ImageRequest.Builder(context)
                    .data(imageResource.value)
                    .build()
            )

Image(painter = painter, contentDescription = null, contentScale = ContentScale.Crop, modifier = Modifier.size(24.dp, 24.dp))

문제 7. rememberCoroutineScope()를 사용해서 Job을 핸들링 하려 했는데 잘안됐음
해결 -> var 로 job을 받는 프로퍼티를 만들 때 remember { mutableStateOf()} 로 만들어서 핸들링 해야함 일반 변수로 사용하면 정상 작동아 안되는 문제가 있음

참고 :: https://proandroiddev.com/jetpack-compose-side-effects-ii-remembercoroutinescope-76104d7ff09

문제 8. hilt 와 compose의 viewModel을 통합에서 @Coposable한 객체에 viewModel()삽입이 안되는 문제
해결 -> 파라미터의 명과 타입을 동일한 이름으로 해줘야함 그러면 주입이 가능해짐
import androidx.lifecycle.viewmodel.compose.viewModel
위에것이 임포트 되야 하는데 그러기 위해서 viewModelName: ViewModelName = viewModel()같은 형태가 되야 함, 이름이 같아야 추정이 가능 한 것으로 생각됨

문제 9. cursor가 뭐지?
해결 -> cursor는 데이터 베이스에서 2차원의 테이블을 나타내는 객체이다. 따라서 쿼리의 결과를 cursor가 받고 인덱스를 옮김으로 쿼리에 대한 결과를 확인 할 수 있다.
따라서 안드로이드에서 쿼리에 대한 결과에서 moveToFirst() 를 호출하는 이유는 가장 처음의 인텍스로 이동해 검색해야 하기 때문이다.

공식문서의 일부 코드를 봐도 그렇게 호출해서 사용함

공식문서 -> https://developer.android.com/training/data-storage/shared/media

while (cursor.moveToNext()) {
        // Get values of columns for a given video.
        val id = cursor.getLong(idColumn)
        val name = cursor.getString(nameColumn)
        val duration = cursor.getInt(durationColumn)


문제 10. 파일의 저장과 호출은 어떻게 실행해야 할까?

생각보다 복잡한 개념들을 요구한다. content provier, Uri에서 scheme와 authority 등 Uri에서 가지는 의미와 안드로이드의 정책상 구분되는 명칭들, mimeType 등을 고려해야한다.

먼저 contentUri 를 살펴보자 공식 문서에 의하면 아래와 같이 안내하고 있다. (https://developer.android.com/reference/android/content/ContentUris)
 <Content URIs have the syntax>  content://authority/path/id

val mimeTypeMap = MimeTypeMap.getSingleton()
val extensions = listOf("gif", "pdf", "png", "mp3", "avi", "jpeg", "zip", "csv", "avi", "txt")
for (extension in extensions) {
            val mimeType = mimeTypeMap.getMimeTypeFromExtension(extension)

            Log.d(TAG, "extension: $extension, mimeType: $mimeType")
        }

mime의 종류를 살펴볼려면 위의 코드를 활용하자

해결 ->
파일의 접근과 리스트를 받기위해서는 위에서처럼 복잡한 과정이 필요하지 않다. 그 이유는 위에 경우에는 app to app 을 위한 과정이기 때문에 실제로 복잡한 것이고
앱내에서 권한과 실행을 위해서는 단순히 File API만 잘 다뤄주면 된다.
즉 URI를 잘 받아오는 것이 중요한 과제라고 볼 수 있다.

https://stackoverflow.com/questions/51168486/getting-list-of-images-from-a-folder-in-android-kotlin
위 링크에는 가장 기본적인 접근이 나와 있고 나도 비슷한 접근을 했다. 코드를 보자.

val mediaDir = externalMediaDirs.firstOrNull()?.let {
            File(it, getString(R.string.app_name)).apply { mkdirs() }
            it
        } ?: return

val fileList = mediaDir.let { File(it, getString(R.string.app_name)).run { listFiles() } }

// 파일 목록을 가져온 부분
fileList.forEachIndexed { index, file ->
            Log.d(TAG, "is file datas? ::: data >> $file")

            if (index % 4 == 0) {
                Log.d(TAG, "delete File name ::: name >>> $file")

                // 삭제를 위한 부분
                File(file.toURI()).apply { delete() }
            }
        }

이렇게 하면 uri는 /storage/emulated/0/Android/media/com.example.autocameracompose/AutoCameraCompose가 나온다.
/storage/emulated/0/Android/media/PACKAGE_NAME 이 부분까지가 externalMediaDirs에서 받아오는 것이고 뒤에는 앱의 이름이다.

FILE 에서는 재미있게도 디렉토리와 파일을 구분해서 접근할 수 있다. 그러므로 uri이 디렉토리인지 파일 인지 잘 생각해서 접근하는 것이 좋겠다.


문제 11. FTP로 데이터 전송하기
해결 -> 2개의 블로그 글을 찾았다. FTP4j를 이용하는 것과 apache 를 사용하는것

아파치 :: https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=ambidext&logNo=221487781896
FTP4j :: https://stackoverflow.com/questions/50224728/how-to-use-the-ftp-to-upload-a-small-file-or-an-image-in-android-studio-using-ko


문제 12. context에서 externalMediaDirs에 직접적인 접근을 하려 봤더니 deprecated되어 있었다. 다른 방법을 찾아야 했음
해결 -> context.externalMediaDirs 이 deprecated 되어서 이제는 MediaStore를 활용해 접근해야 한다.

문제 13. compose에서 viewmodel을 제대로 DI가 안되는 문제가 있음
해결 -> https://stackoverflow.com/questions/66390658/jetpack-compose-viewmodel-is-giving-error-has-no-zero-argument-constructor-w
여기서 보면 알겠지만 네비게이션과 함께 쓰는 경우 hiltViewModel()을 사용 해야 한다.
참고 ) https://stackoverflow.com/questions/63144315/how-to-inject-app-context-in-viewmodel-with-hilt


*** 문제 14. 안드로이드로 FTP(port : 21), SFTP(port : 22) 접근하기

 세부 문제 1.) 먼저 https로 접근 하는 것이 아니기 때문에 http의 허용을 해줘야 한다. 이것은 안드로이드 정책에서 위험 권한에 속하는 부분으로 설정이 번거롭다.
 해결 -> https://velog.io/@skdlsrb1212/android-http-%EC%82%AC%EC%9A%A9-%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0

 세부 문제 2.) FTP를 보내기 위해서 활용한 방법으로는 문제 11. 을 통해서 해결 했다.

 세부 문제 3.) FTP를 구현하고 보니 port 22를 쓰는 SFTP는 FTP4j가 지원하지 않는 것 이였다. 실행이 안되는 것이 맞음
 해결 -> JSCH (SFTP)를 사용하기로 했다.
 
 아주 오래된 라이브러리라고 하는데 일일이 구현할 수 없으므로 일단은 사용하기로 함.
 참고 -> https://ourcodeworld.com/articles/read/30/how-to-upload-a-file-to-a-server-using-jsch-sftp-in-android
        https://jsonobject.tistory.com/513

 참고2. -> 하다가 엄청 에러를 많이 봤는데 그중에 대표적인 것이 no such file 이다. 이것은 put할때 위치와 파일명을 구분해주지 않아서 생기는 문젠데.
 put 을 하기전에 channel이 현재 어디의 위치에 존재하는지 확인을 하기 위해서 pwd()를 통해서 정보를 받아오고 이후에는 원하는 디렉토리에 맞춰 이동 시켜 파일명만
 put에 기제해 줘야 할 것 같다. 사실 정확한 작동 방식은 모르는데 이렇게 진행 해야 하는 것 같음

 일단 만들었던 전체 코드를 첨부
fun uploadFileWithSFTP(file: File) {
    var session: Session? = null
    try {
        session = JSch().getSession("USER", "13.209.66.185")
        session.setConfig(Properties().apply {
            this["StrictHostKeyChecking"] = "no"
        })
        session.setPassword("qwert123!@#")
        session.connect()
        val channel = session.openChannel("sftp") as ChannelSftp
        channel.connect()
        // 파일 전송 실행
        // 원본 파일 경로 문자열 또는 InputStream 객체를 전달 가능
        Log.d("mainActivity", "sftp file path check ::: path >>> ${file.toString()}")

        val targetStream = FileInputStream(file)
        val fileName = file.toString().split("/").last()
//        channel.put(file.toString(), "./home/USER/")

        val pwd = channel.pwd()
        Log.d("mainActivity", "check sftp current position ::: pwd >> $pwd")
        channel.put(targetStream, "$fileName")
        channel.disconnect()
    } catch (ex: FileNotFoundException) {
        Log.d("mainActivity", "sftp error FileNotFoundException ::: error >>> ${ex.printStackTrace()}")
        // 소스 파일이 존재하지 않을 경우 예외 처리
    } catch (ex: UnknownHostException) {
        Log.d("mainActivity", "sftp error UnknownHostException ::: error >>> ${ex.printStackTrace()}")
        // 파일을 전송할 원격 호스트가 유효하지 않을 경우 예외 처리
    } catch (ex: JSchException) {
        when(ex.message) {
            "Auth fail" -> {
                Log.d("mainActivity", "sftp error password or username ::: error >>> ${ex.printStackTrace()}")
            }// username 또는 password가 일치하지 않을 경우 예외 처리
            else -> {
                Log.d("mainActivity", "sftp error JSchException ::: error >>> ${ex.printStackTrace()}")
                ex.printStackTrace()
            }
        }
    } catch (ex: SftpException) {
        when(ex.message) {
            "Permission denied" -> {
                Log.d("mainActivity", "sftp error permission denied ::: error >>> ${ex.printStackTrace()}")
            } // 대상 디렉토리 및 파일에 대한 쓰기 권한이 없을 경우 예외 처리
            else -> {
                Log.d("mainActivity", "sftp error SftpException ::: error >>> ${ex.printStackTrace()}, message >>> ${ex.message}")
                ex.printStackTrace()
            }
        }
    } catch (ex: Exception) {
        Log.d("mainActivity", "sftp error Exception ::: error >>> ${ex.printStackTrace()}")
        ex.printStackTrace()
    } finally {
        session ?.disconnect()
    }
}


*** 문제 15. 안드로이드에서 파일의 생성과 접근을 위한 경로 설정이 어려움
해결 -> 생각보다 엄청 쉬운 문제 인데 개념을 잘 모르면 헤매는 부분이기도 하다. 먼저 안드로이드에서 정책상 사용하고 있는 저장 공간에 대해 알아야 한다.

크게 2개의 공간으로 나뉜다.
internal storage
 해당 앱에서만 사용이 가능하고 외부에서 접근 할 수 없는 공간이다.

tip --> 이 공간은 디바이스에서 탐색기를 통해서 데이터를 열람할 수 없고 안드로이드 스튜디오에 device file explorer를 통해서 data/data/[app_package] 를 찾으면
안에 있는 데이터를 확인 할 수 있다.
https://choidev-1.tistory.com/70

external storage
 해당 앱 말고도 여러 앱에서 접근이 가능한 저장공간이다. 앱이 삭제 되더라도 지워지지 않는 영구적인 저장공간으로 대부분 이 공간을 사용한다.
 단순하게 접근하는 방법은 
 applicationContext.externalMediaDirs 이지만 다른 특정한 폴더를 찾고 싶을땐

 아래의 코드를 사용하면 된다.
 applicationContext.getExternalFilesDir(Environment.DIRECTORY_PICTURES)?.absolutePath

 기초적인 이해를 위한 블로그
 >> https://black-jin0427.tistory.com/236
 >> https://juahnpop.tistory.com/218

그리고 각 storage 안에서도 file, cache 등의 파일 디렉터리 들이 존재 하기 때문에 더 헷갈리기도 하다.

코드상으로 경로를 알아보면
applicationContext.filesDir 의 경우는 internal storage를 말한다. 외부에서 파일을 접근할 수 없고 오직 앱이 존재하는 경우에만 있는 데이터 이다.

하지만 applicationContext.externalMediaDirs 를 사용한다면 외부에서도 접근이 가능한 공간에 저장을 하게 된다. 이후 MediaStore를 사용하도록 정책이 변경 되었지만
일단은 경로가 이렇게 나뉜다는 것을 알아두면 좋을 것 같다.

그리고 이제 API 29 버전 이상에서 부터는 MediaStore를 통한 path를 받아오는데 실제로 오는 값을 살펴보면 상당히 이상하다는 것을 확인 할 수 있다.
일반적인 경로의 형태와 다르다. >>> content://media/external/video/media 처럼 나오는데 이것은 content id라는 형태로 일반적으로 사용하는 File uri 과는 다른 방식이다.
안드로이드에서는 file uri 과 content uri의 2가지 방법을 활용하기 때문에 상황에 따라 적절히 사용하는 것이 좋다.

추가적인 정보는 어떤 블로그의 댓글로 대체하려 한다.

의견 >> 안드로이드에서 파일의 uri를 공유할 때 file uri와 content uri가 쓰입니다.
작성자님이 말씀하신 바로 접근가능한 uri는 file uri이고 (file://path/filename)
id의 형태는 content uri 입니다.(content://authority/id)

안드로이드에서 file uri 사용을 보안적인 이슈로 권장하지 않고 있습니다. (앱 내부 폴더로 바로 접근이 가능해지기 때문. 안드로이드 7.0 이상부터는 내부저장소를 가르키는 file uri는 외부로 공개를 시도하면 에러(or 경고)가 발생할거에요(?))

content uri는 컨텐츠 프로바이더를 통해서 데이터를 가져올 수 있기 때문에, 외부로 공개되는 uri라면 content uri를 이용하셔야 합니다.
외부로 공유해서 접근할 경우 임시적인 권한을 부여해서 권한을 보유해야만 접근이 가능해집니다.

참고해보시면 좋을 것 같습니다. :)

출처: https://crystalcube.co.kr/184

해결 2. -> 
https://codechacha.com/ko/android-data-storage/
https://codechacha.com/ko/android-q-scoped-storage/

로그 찍을 때 사용했던 코드 -> 

val internalPath = context.filesDir
    val file = File(context.externalCacheDir, "uploadList.txt")
    
    Log.d("mainActivity", "path File check ::: path >>> $path")
    Log.d("mainActivity", "internal path check ::: path >>> $internalPath")

    // android Q 대응
    val exDir1 = Environment.getExternalStorageDirectory()
    val exDir2 = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES)

    Log.d("mainActivity", "Environment path check ::: path >>> $exDir1")
    Log.d("mainActivity", "Environment path check ::: path >>> $exDir2")

    val mediaDirImg = MediaStore.Images.Media.EXTERNAL_CONTENT_URI
    val mediaDirAudio = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI
    val mediaDirFile = MediaStore.Files.FileColumns.DATA
    val mediaDirVideo = MediaStore.Video.Media.EXTERNAL_CONTENT_URI

    Log.d("mainActivity", "mediaDir path check ::: path >> $mediaDirImg")
    Log.d("mainActivity", "mediaDir path check ::: path >> $mediaDirAudio")
    Log.d("mainActivity", "mediaDir path check ::: path >> $mediaDirVideo")
    Log.d("mainActivity", "mediaDir path check ::: path >> $mediaDirFile")


문제 16. 장치 정보를 불러와 저장하는 정보에 넣어 줬으면 함
해결 -> https://salix97.tistory.com/225
이 블로그를 보고 정보 취득이 가능했음

문제 17. cpu의 활동정보를 기록해서 스트레스 테스트를 요청 받음


문제 18. simple data format 활용하기
해결 -> https://developer.android.com/reference/java/text/SimpleDateFormat
여기에 보면 포멧에 대한 정보가 나옴
"yyyy-MM-dd" 등으로 사용이 가능함


문제 19. compose로 system bar, system navigation, system bar navigation 영역 차지 하기
해결 1. ->
 먼저 system bar, navigation 영역을 고정적으로 차지하지 않고 내부의 content가 차지 할 수 있도록 하는 방법
 class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        WindowCompat.setDecorFitsSystemWindows(window, false) // 이부분
 ...
    }
 }

 를 실행해주면 된다.
 
해결 2. -> system bar, navigation을 수정하는 방법
 window를 활용해서 색등을 바꿀 수 있음, 근데 투명하게 해서 보이게 하는 방법을 모르겠음
 해결함 -> window.navigationBarColor = 0x00000000 로 주게되면 투명하게 되서 밑에 있는 정보까지 확인이 가능함 argb 형태로 받기 때문에 가능

 문제 20. 애니메이션의 적용을 살펴봐야함
 해결 -> https://developer.android.com/jetpack/compose/animation
 공식 사이트 참고