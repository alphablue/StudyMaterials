문제1)
-> range(범위) 연산을 통해 필요한 조건에 맞는 값 찾기

0과 100 사이의 값중 원하는 값을 선택해서 가져오고 싶을 때 range 를 사용하면 편리함

(0..100).filter{} 를 활용하면됨

문제 2)
-> map 의 key value 나누는 기법, 구조분해기법(destructuring declarations)

페어로 이루어진 값을 하나씩 분리해 변수로 활용이 가능한 기법임


문제 3)
-> 정수의 제곱을 구하기 위해서는 어떻게 해야할까?

 double이나 float 으로 형 변환 이후 pow() 함수를 활용하자


문제 4)
-> list 에서 max 값을 구해야 할 때 컴파일 버전에 따라 사용 하는 방법이 달라짐

kotlin 1.7 이상 -> collection.max()
kotlin 1.4 이상 -> collection.maxOf{it} 

문제 5)
-> string(문자열) 을 정렬 하는 방법은 뭘까?

string 을 정렬하기 위해서는 char list 형으로 변경해 줘야할 필요가 있다.

string.toCharArray().sorted().jointToString("") 의 방법을 사용하면 정렬된 string 을 얻을 수 있다.


문제 6)
-> 문자열에서 각 요소별로 갯수를 묶어주고 싶은 경우가 있음

string.groupingBy { it }.eachCount() 를 사용하면 Map<char, Int> 형태로 반환되서 요소별 갯수를 쉽게 파악 할 수 있음

문제 7)
-> 문자열에서 중복을 제거하는 방법, 쉽게 쓸 수 있도록 제공해 주는 함수가 있음

string.toList().distinct().joinToString("")

문제 8)
-> 소인수분해 값 표현하기

수학적인 사고가 필요해 인터넷에 정리된 내용을 가져왔음

해결
-> https://tutorialwing.com/kotlin-program-to-find-all-prime-factors-of-given-number/

var n = number
    
    while (n % 2 == 0) {
        arr.add(2)
        n /= 2
    }
 
    val squareRoot = sqrt(n.toDouble()).toInt()
 
    for (i in 3..squareRoot step 2) {
        while (n % i == 0) {
            arr.add(i)
            n /= i
        }
    }
 
    if (n > 2) {
        arr.add(n)
    }
 
    return arr

핵심 로직은 위와 같음


문제 9)
-> mutableListOf 를 스택처럼 사용하는 방법, 
mutableListOf 에서는 removeLast() 를 사용하면 가장 마지막의 값을 반화하고 본래의 리스트에서는
마지막 원소를 제거한다.

문제 10)
-> IntArray 에서 평균 구하기

IntArray 의 타입은 많은 연산을 제공하는것 같음, average() 함수가 존재해 double 형으로 평균값을 반환 해 준다.

문제 11)
-> 배열등의 정렬을 원하는 조건대로 반환하기 (sortedWith 활용)

intArrayOf(1, 3, 4, 5,5, 20, 6).sortedWith{ a1, a2 ->
        println("a1 : $a1, a2: $a2")
        if(a1 > a2) -1
        else 1
    }
// 내림차순으로 정렬됨

위의 코드를 실행 할때 작동하는 방식을 직관적으로 알 수 있다. sortedWith 은 1, -1, 0 중 하나가 나와야 하는데
a1, a2 는 비교하는 대상이다. 1 일 경우 a1 값을, -1 일 경우 a2 값을 반환한다.
 sortedWith의 람다 안에서는 어떤 조건이 값은 경우 다른 분기 처리등 세부적인 조건 처리를 가능케 한다.

 fun main(args: Array<String>){
    val dates = mutableListOf(
        Date(2020, 4, 3),
        Date(2021, 5, 16),
        Date(2020, 4, 29)
    )

    dates.sortWith(compareBy<Date> { it.year }.thenBy { it.month }.thenBy { it.day })

    dates.forEach { println(it) }
}
// 출력
Mon May 03 00:00:00 KST 3920
Sat May 29 00:00:00 KST 3920
Thu Jun 16 00:00:00 KST 3921

예로 위의 코드는 년, 달 이 같은경우의 처리를 나타내고 있다.