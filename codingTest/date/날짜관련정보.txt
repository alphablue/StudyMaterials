자료 1) 날짜의 비교를 위한 dateFormat 활용 방법

https://www.techiedelight.com/ko/compare-two-dates-in-kotlin/

java의 패키지에 많이 종속적인 부분이 있는데 java.util.Date 패키지와 java.util.Calendar 패키지는 레거시 코드에 사용되며
윤년의 고려가 되지 않기 때문에 사용하는데 권장하지 않는 방법이다.

대신에 sdk 26버전 이상부터 java.time 패키지를 사용하기를 권장하고 있어 그것을 활용한 날짜 계산을 사용하면 좋을 것으로 생각된다.
참고 ) https://stackoverflow.com/questions/38967422/calculate-age-from-birthdate


참고 ) min sdk 가 26보다 작을 때 stackoverflow 의 내용
    https://stackoverflow.com/questions/47006254/how-to-get-current-local-date-and-time-in-kotlin




 세부 문제 ) 날짜를 문자열로된 "20201122" 의 형태로 받아서 현재 날짜와 계산을 통해 만 나이를 알아보는 문제였다.
 
 time 패키지는 LocalDate 객체를 사용하기를 권장하고 있어 이를 위해 DateTimeFormatter 를 활용해 받아왔다. 

 val formatter = DateTimeFormatter.ofPattern("yyyyMMdd")
        val today: LocalDate = LocalDate.now()
        val date: LocalDate = LocalDate.parse("20201122",formatter)
        println(date)
        println(today)

        println(Period.between(
            date,
            today
        ))

위의 코드처럼 간단하게 지정한 날짜와 형태를 넣어주고 현재 날짜를 받아 비교 할 수 있다.

참고 ) LocalDate 를 활용한 기준 날짜의 전후 비교 하는 것
https://www.techiedelight.com/ko/compare-two-dates-in-kotlin/

참고 ) 레거시 코드를 위해 date 패키지와 Calendar 패키지를 활용 하는 것

참고 ) dateFormatter Pattern 정보
https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html

추가)
-> 두 날짜의 비교를 진행하고 싶은데 sdk 별로 하는 방법이 다름 day의 갯수를 세고 싶은 방법

if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
        val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd")
        val timeNow = LocalDate.now()
        val inputDay = LocalDate.parse(date, formatter)

        return ChronoUnit.DAYS.between(inputDay, timeNow)
    } else {

        // sdk O 보다 낮은 경우

        val formatter = SimpleDateFormat("yyyy-MM-dd", Locale.KOREA)
        val today = Calendar.getInstance()

        // string 으로 바꾼거를 다시 date 객체로 바꾼것
        val parsedToday = formatter.format(today.time)
            .let {
                formatter.parse(it)
            }
        val ff = formatter.parse("2021-10-01")
        val diff = parsedToday.time - ff.time

        return (diff / (1000*60*60*24))
    }


문제
-> 날짜 문자열을 다른 형태의 날짜로 보여 주고 싶을때
val inputFormatter = SimpleDateFormat("yyyy-MM-dd", Locale.KOREA)
        val outputFormatter = SimpleDateFormat("MM/dd (EEE)", Locale.KOREA)

        inputFormatter.parse(date)
            .let {
                outputFormatter.format(it)
            }

아래는 팁)
val outputFormatter1 = SimpleDateFormat("MM/dd (EEEE)", Locale.KOREA)  // 12/12 (목요일)
val outputFormatter2 = SimpleDateFormat("MM/dd (EEE)", Locale.KOREA)   // 12/12 (목)

    println(outputFormatter1.format(Date()))


localDataTime 객체와 localTime 객체의 차이는 뭘까

문제 
-> LocalDateTime 에서 long 형의 날짜 정보를 받고 활용하기를 원하는데 그게 쉽지 않았음

해결)
LocalDateTime.now().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli()

문제
-> system.currentTimeMillis() 를 대체 하는 방법

해결)
Instant.now().toEpochMilli()


문제
-> millis 형태의 날짜데이터를 Long 형으로 받을 때 처리하는 방법

// long 형 날짜를 오늘과 비교해 day 차이를 확인 해 줌
fun getBetweenDays(date: Long): Long =
    if (versionCheckOreo()) {
        val timeNow = LocalDateTime.now()
        val inputDay = LocalDateTime.ofInstant(Instant.ofEpochMilli(date), ZoneId.systemDefault())

        ChronoUnit.DAYS.between(inputDay, timeNow)
    } else {
        val inputDay = Calendar.getInstance().apply { timeInMillis = date }
        val today = Calendar.getInstance()
        val diff = today.timeInMillis - inputDay.timeInMillis

        (diff / (1000 * 60 * 60 * 24))
    }


// Long 형 날짜를 yyyy-MM-dd 형식으로 반환해줌
fun getCurrentTime(): Long =
    if(versionCheckOreo()) LocalDateTime.now().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli()
    else Calendar.getInstance().timeInMillis


// Long 형 날짜를 yyyy.MM.dd 로 변환
fun convertDateString(date: Long): String = if(versionCheckOreo()) {
        val inputFormatter = LocalDateTime.ofInstant(Instant.ofEpochMilli(date), ZoneId.systemDefault())
        val outputFormatter = DateTimeFormatter.ofPattern("yyyy.MM.dd", Locale.KOREA)

        outputFormatter.format(inputFormatter)
    } else {
        val inputFormatter = Calendar.getInstance().apply { timeInMillis = date }.time
        val outputFormatter = SimpleDateFormat("yyyy.MM.dd", Locale.KOREA)

        outputFormatter.format(inputFormatter)
    }


private fun versionCheckOreo() = Build.VERSION.SDK_INT >= Build.VERSION_CODES.O