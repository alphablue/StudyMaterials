백 스택을 변경하는 작업은 새 대상을 스택 맨 위로 푸시하거나 스택에서 최상위 대상을 팝하여 항상 스택 맨 위에서 작동합니다. 대상으로 이동하면 해당 대상이 스택 맨 위에 푸시됩니다.

navigation의 기본 구성요소

* Navigation Graph
-> xml 리소스가 포함된 것

* NavHost
-> xml 의 fragmentContainer 에서는 navHostFragment 가 구현되어 있고 그것을 활용해 navHost를 얻을 수 있다.
이건 그래프의 목적지를 표시하는 빈 컨테이너이다.

xml 에서의 구현

<androidx.fragment.app.FragmentContainerView
        android:id="@+id/nav_host_fragment"
        android:name="androidx.navigation.fragment.NavHostFragment" // 이 부분이 navHostFragment 를 구현한 것
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"

        app:defaultNavHost="true"
        app:navGraph="@navigation/nav_graph" />


* NavController
-> 앱 내에 이동(탐색)을 관리하는 개체


2022. 7. 18.

shared viewmodel Across fragments 

>> 이 프로젝트에서 알게된 정보

1) 네비게이션 등록을 할 때 mainActivity 는 컨테이너 일 뿐 뷰를 직접 그리면 안된다.

2) setupActionBarwithNavController 를 사용 할 때는 label 을 맞춰야지 up 버튼의 네비게이션이 정상 작동한다.

3) const val 는 컴파일 타임에 정의가 되며 수정이 불가능한 객체이다.

4) data binding 을 사용 할 때는 꼭 DataBindingUtil 을 사용할 필요는 없다. 뷰 바인딩 하듯이 인플레이트 해도
사용이 가능하다.

5) data binding 에 viewmodel 을 적용 하고자 한다면 lifecycleowner 를 등록 해줘야 한다.
binding?.apply {
            // Specify the fragment as the lifecycle owner
            lifecycleOwner = viewLifecycleOwner

            // Assign the view model to a property in the binding class
            viewModel = sharedViewModel

            // Assign the fragment
            flavorFragment = this@FlavorFragment
        }

이 예제에서 사용된 방식을 살펴보면 위와 같다.

 6) calendar 객체를 활용하면 날짜를 쉽게 표현 할 수 있다. 이 프로젝트에서 사용된 예는 현재 날짜 포함한 4일의 정보를 가져 오는 방법을
 사용 했다. 

 private fun getPickupOptions(): List<String> {
        val options = mutableListOf<String>()
        val formatter = SimpleDateFormat("E MMM d", Locale.getDefault())
        val calendar = Calendar.getInstance()
        repeat(4) {
            options.add(formatter.format(calendar.time))
            calendar.add(Calendar.DATE, 1)
        }
        return options
    }

위의 코드에서 처럼 calendar 에 날짜를 하나씩 더해사면서 표현을 했다. SimpleDateFormat 에 대한 정보는 공식 자료에서 제공하는 링크를 첨부 할 것.
-> https://developer.android.com/reference/java/text/SimpleDateFormat?authuser=2#date-and-time-patterns

7) NumberFormat 을 활용하면 설정한 지역에 맞는 통화 화폐 단위를 보여줄 수 있다.

val price: LiveData<String> = Transformations.map(_price) {
        // Format the price into the local currency and return this as LiveData<String>
        NumberFormat.getCurrencyInstance().format(it)
    }

위의 코드에서는 기기의 설정 값을 토대로 보여주는 방법을 취하고 있다.

8) 공유하기 기능 확인하기

fun sendOrder() {
        // Construct the order summary text with information from the view model
        val numberOfCupcakes = sharedViewModel.quantity.value ?: 0
        val orderSummary = getString(
            R.string.order_details,
            resources.getQuantityString(R.plurals.cupcakes, numberOfCupcakes, numberOfCupcakes),
            sharedViewModel.flavor.value.toString(),
            sharedViewModel.date.value.toString(),
            sharedViewModel.price.value.toString()
        )

        // Create an ACTION_SEND implicit intent with order details in the intent extras
        val intent = Intent(Intent.ACTION_SEND)
            .setType("text/plain")
            .putExtra(Intent.EXTRA_SUBJECT, getString(R.string.new_cupcake_order))
            .putExtra(Intent.EXTRA_TEXT, orderSummary)

        // Check if there s an app that can handle this intent before launching it
        if (activity?.packageManager?.resolveActivity(intent, 0) != null) {
            // Start a new activity with the given intent (this may open the share dialog on a
            // device if multiple apps can handle this intent)
            startActivity(intent)
        }
    }

위 코드를 살펴보면 intent 를 만들고 intent 를 받을 수 있는 모든 앱에 대해서 메세지를 전송 할 수 있도록 함


LetterListFragment

>> 이 프로젝트에서 알게된 정보

1) fragment 에서 viewbinding 을 사용 할 때 주의 할 점. 

private var _binding: ResultProfileBinding? = null
// This property is only valid between onCreateView and
// onDestroyView.
private val binding get() = _binding!!

override fun onCreateView(
    inflater: LayoutInflater,
    container: ViewGroup?,
    savedInstanceState: Bundle?
): View? {
    _binding = ResultProfileBinding.inflate(inflater, container, false)
    val view = binding.root
    return view
}

override fun onDestroyView() {
    super.onDestroyView()
    _binding = null
}

위 코드는 구글 공식 문서에서 권장하는 방식이다. fragment 에서 위에처럼 특별한 방식으로 사용 하는 이유는 메모리 누수의 위험성이 있기 때문이다.
명확한 설명은 할 수 없지만 lateinit var 을 사용하기 보다는 fragment 에서는 위처럼 사용 하도록 하자

참고할 링크
https://yoon-dailylife.tistory.com/57
https://stackoverflow.com/questions/70065804/why-not-use-lateinit-modifier-in-andrioid-fragment-view-binding


2) fragment 에서 menu 를 코드상에서 적용 할 수도 있다. 그 방법으로 onCreateOptionsMenu 함수를 오버라이드 해서 사용하면된다.
여기서 사용된 코드를 살펴보자

override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {

        // res/menu 에 있는 xml 파일을 불러온 것
        inflater.inflate(R.menu.layout_menu, menu)

        // 버튼을 등록 한 것
        val layoutButton = menu.findItem(R.id.action_switch_layout)
        setIcon(layoutButton)
    }

그리고 설정한 옵션의 클릭 이벤트를 작동시키기 위해서

override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            R.id.action_switch_layout -> {
                // Sets isLinearLayoutManager (a Boolean) to the opposite value
                isLinearLayoutManager = !isLinearLayoutManager
                // Sets layout and icon
                
                // inner fun 처럼 보이게 코드를 넣은것 이 함수를 호출해 변경 시킨다.
                private fun chooseLayout() {
                        if (isLinearLayoutManager) {
                        recyclerView.layoutManager = LinearLayoutManager(context)
                        } else {
                        recyclerView.layoutManager = GridLayoutManager(context, 4)
                        }
                        recyclerView.adapter = LetterAdapter()
                }

                // setIcon(item)

                private fun setIcon(menuItem: MenuItem?) {
                        if (menuItem == null)
                        return

                        menuItem.icon =
                        if (isLinearLayoutManager)
                                ContextCompat.getDrawable(this.requireContext(), R.drawable.ic_grid_layout)
                        else ContextCompat.getDrawable(this.requireContext(), R.drawable.ic_linear_layout)
                }

                return true
            }
            // Otherwise, do nothing and use the core event handling

            // when clauses require that all possible paths be accounted for explicitly,
            // for instance both the true and false cases if the value is a Boolean,
            // or an else to catch all unhandled cases.
            else -> super.onOptionsItemSelected(item)
        }
    }

위와 같은 코드를 작성해서 활용 하면 된다.

3) object 의 표현방식과 class 안에서 companion object 를 만드는 것에 대한 차이가 궁금해서 찾아 봤다.
-> https://stackoverflow.com/questions/43814616/kotlin-difference-between-object-and-companion-object-in-a-class


2022. 7. 19.

1) navigation lib 를 사용할 때 바텀 네비게인션에서 같은 아이템을 계속해서 누르면 스택이 쌓이는 문제가 있음
-> 이를 방지하기 위해서 setLaunchSingleTop 옵션을 활용 해 줘야함
val singleOption = NavOptions.Builder().setLaunchSingleTop(true).build()

공식 문서 : https://developer.android.com/reference/kotlin/androidx/navigation/NavOptions.Builder#setLaunchSingleTop(kotlin.Boolean)

2) bottom navigation 의 menu 이동에 있어서 약간의 기믹을 추가하면 단일 메뉴 이동을 구현 할 수 있다.
-> menuLocator 에는 처음 시작하는 메뉴의 종류를 넣어주고 setOnItemSelectedListener 에서 각 아이템 별로 이동 할 때 마다
아래의 함수를 불러와 사용하면 백스택이 존재 하지 않는 단일 메뉴 기능을 구현 할 수 있음

-> option 을 잘 정하는게 중요함 공식문서를 확인 하는게 중요함

private fun goMenuFragment(@IdRes menuId: Int) {
        val backStackOption = NavOptions.Builder()
            .setPopUpTo(menuLocator, true)
            .setLaunchSingleTop(true)
            .build()
        navController.navigate(menuId, null, backStackOption)
        menuLocator = menuId
    }

2022. 7. 20

1) android editTextView 에서 TextWatcher 를 사용하는 경우 각 함수의 호출 방식 을 살펴볼 필요가 있음

> https://velog.io/@dongchyeon/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-EditText%EC%97%90-%EA%B0%92%EC%9D%B4-%EC%9E%88%EC%9D%84-%EB%95%8C%EB%A7%8C-%EB%B2%84%ED%8A%BC-%ED%99%9C%EC%84%B1%ED%99%94%ED%95%98%EA%B8%B0

참고 유튜브 > https://www.youtube.com/watch?v=IxhIa3eZxz8

2) 휴대폰 번호를 - 가 붙은 형태로 변형하기

참고함
> https://stackoverflow.com/questions/72437053/how-to-format-string-to-phone-number-kotlin-alghorithm

> https://betterprogramming.pub/10-useful-kotlin-string-extensions-46772b653f71

3) TextInputLayout 를 사용 할 때 지원 해주는 style 도 적용이 가능함
style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
과 같이 속성으로 넣어주면 활용 가능

이때 문서에 내용을 살펴보면 자동 완성 기능도 적용이 가능한 것으로 보임
https://developer.android.com/reference/android/widget/AutoCompleteTextView

스타일링 참고
https://medium.com/omisoft/textinputlayout-styling-8b36a5e0d73c

4) editTextView 에서 space 를 못받도록 하는 방법
private val inputFilterNoSpace =
        InputFilter { source, start, end, dest, dstart, dend ->
            if(source.isBlank())
                return@InputFilter ""
            else return@InputFilter source
        }

필터를 만들어주고
editInputName.filters = arrayOf(inputFilterNoSpace)
필터를 적용 시켜 주면 된다.
c
이게 작동하는 이유는 스페이스를 넣었을 때는 문자열이 분리되어 새로운 문자열로 인식하기 때문에 기존의 문자와
연결되지 않고 source 쪽에 넘어 오기때문이다.

2022. 7. 21.

1) 백준 1260
https://youjourney.github.io/archivers/BOJ1260



2022. 8. 16

문제 1. 네비게이션의 이동시에 정보를 넘겨 주고싶음, 큰 데이터가 아니라서 viewmodel 을 사용 하는 대신에 이동시에 넘기고 싶음

해결) 
composable(
            "result/{tt}",
            arguments = listOf(navArgument("tt") { type = NavType.FloatType})
        ) {
            val testArg = it.arguments?.getFloat("tt")

            Log.d("test", "$testArg")

            testArg?.let {
                ResultView(result = testArg.toDouble())
            }
        }

위의 코드에 나타난 것 처럼 type 을 지정해 주고 정보를 받아 왔음

참고한 자료
https://stackoverflow.com/questions/69059149/how-pass-parcelable-argument-with-new-version-of-compose-navigation
